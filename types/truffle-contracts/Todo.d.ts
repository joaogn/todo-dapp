/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TodoContract extends Truffle.Contract<TodoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TodoInstance>;
}

type AllEvents = never;

export interface TodoInstance extends Truffle.ContractInstance {
  userTasks(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: BN; 3: boolean }>;

  createTask: {
    (
      text: string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      text: string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      text: string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      text: string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTaks(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ id: BN; text: string; date: BN; finished: boolean }[]>;

  getTask(
    taskId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ id: BN; text: string; date: BN; finished: boolean }>;

  methods: {
    userTasks(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: BN; 3: boolean }>;

    createTask: {
      (
        text: string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        text: string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        text: string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        text: string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getTaks(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ id: BN; text: string; date: BN; finished: boolean }[]>;

    getTask(
      taskId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ id: BN; text: string; date: BN; finished: boolean }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
